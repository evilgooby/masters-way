// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ways.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countWaysByType = `-- name: CountWaysByType :one
SELECT COUNT(*) FROM ways
WHERE ways.is_private = false
    AND (
        ($1 = 'inProgress'
            AND ways.is_completed = false
            AND ways.updated_at > (($2)::timestamp - interval '14 days'))
        OR ($1 = 'completed' AND ways.is_completed = true)
        OR ($1 = 'abandoned'
            AND (ways.is_completed = false)
            AND (ways.updated_at < (($2)::timestamp - interval '14 days'))
        )
        OR ($1 = 'all')
    )
    AND (
        (SELECT COUNT(day_reports.uuid)
            FROM day_reports
            WHERE day_reports.way_uuid = ways.uuid
        ) >= $3::integer
    ) AND (LOWER(ways.name) LIKE '%' || LOWER($4) || '%' OR $4 = '')
`

type CountWaysByTypeParams struct {
	WayStatus           interface{}      `json:"way_status"`
	Date                pgtype.Timestamp `json:"date"`
	MinDayReportsAmount int32            `json:"min_day_reports_amount"`
	WayName             string           `json:"way_name"`
}

func (q *Queries) CountWaysByType(ctx context.Context, arg CountWaysByTypeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countWaysByType,
		arg.WayStatus,
		arg.Date,
		arg.MinDayReportsAmount,
		arg.WayName,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWay = `-- name: CreateWay :one
INSERT INTO ways(
    name,
    goal_description,
    updated_at,
    created_at,
    estimation_time,
    copied_from_way_uuid,
    is_private,
    is_completed,
    owner_uuid
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING
    uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, is_completed, is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $10) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $10 AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = $10) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = $10) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
`

type CreateWayParams struct {
	Name              string           `json:"name"`
	GoalDescription   string           `json:"goal_description"`
	UpdatedAt         pgtype.Timestamp `json:"updated_at"`
	CreatedAt         pgtype.Timestamp `json:"created_at"`
	EstimationTime    int32            `json:"estimation_time"`
	CopiedFromWayUuid pgtype.UUID      `json:"copied_from_way_uuid"`
	IsPrivate         bool             `json:"is_private"`
	IsCompleted       bool             `json:"is_completed"`
	OwnerUuid         pgtype.UUID      `json:"owner_uuid"`
	WayUuid           pgtype.UUID      `json:"way_uuid"`
}

type CreateWayRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) CreateWay(ctx context.Context, arg CreateWayParams) (CreateWayRow, error) {
	row := q.db.QueryRow(ctx, createWay,
		arg.Name,
		arg.GoalDescription,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.EstimationTime,
		arg.CopiedFromWayUuid,
		arg.IsPrivate,
		arg.IsCompleted,
		arg.OwnerUuid,
		arg.WayUuid,
	)
	var i CreateWayRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.OwnerUuid,
		&i.CopiedFromWayUuid,
		&i.IsCompleted,
		&i.IsPrivate,
		&i.WayMetricsTotal,
		&i.WayMetricsDone,
		&i.WayFavoriteForUsers,
		&i.WayDayReportsAmount,
		&i.ChildrenUuids,
	)
	return i, err
}

const deleteWay = `-- name: DeleteWay :exec
DELETE FROM ways
WHERE uuid = $1
`

func (q *Queries) DeleteWay(ctx context.Context, wayUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWay, wayUuid)
	return err
}

const getFavoriteWaysByUserId = `-- name: GetFavoriteWaysByUserId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
FROM ways
JOIN favorite_users_ways ON favorite_users_ways.way_uuid = ways.uuid
WHERE favorite_users_ways.user_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetFavoriteWaysByUserIdRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) GetFavoriteWaysByUserId(ctx context.Context, userUuid pgtype.UUID) ([]GetFavoriteWaysByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getFavoriteWaysByUserId, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFavoriteWaysByUserIdRow{}
	for rows.Next() {
		var i GetFavoriteWaysByUserIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			&i.ChildrenUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLabelStatistics = `-- name: GetLabelStatistics :many
WITH job_done_data AS (
    SELECT
        job_dones.uuid, job_dones.created_at, job_dones.updated_at, job_dones.description, job_dones.time, job_dones.owner_uuid, job_dones.day_report_uuid,
        job_dones_job_tags.job_tag_uuid,
        job_tags.uuid AS label_uuid,
        job_tags.name AS label_name,
        job_tags.color AS label_color,
        job_tags.description AS label_description
    FROM day_reports
    LEFT JOIN job_dones ON job_dones.day_report_uuid = day_reports.uuid
    INNER JOIN job_dones_job_tags ON job_dones.uuid = job_dones_job_tags.job_done_uuid
    INNER JOIN job_tags ON job_tags.uuid = job_dones_job_tags.job_tag_uuid
    WHERE day_reports.way_uuid = ANY($1::UUID[]) AND day_reports.created_at BETWEEN $2 AND $3
)
SELECT
    label_uuid,
    label_name,
    label_color,
    label_description,
    COUNT(*) AS jobs_amount,
    COALESCE(COUNT(*) * 100 / NULLIF((SELECT COUNT(*) FROM job_done_data), 0), 0)::INTEGER AS jobs_amount_percentage,
    COALESCE(SUM(time), 0)::INTEGER AS jobs_time,
    COALESCE(SUM(time) * 100 / NULLIF((SELECT SUM(time) FROM job_done_data), 0), 0)::INTEGER AS jobs_time_percentage
FROM job_done_data
GROUP BY label_uuid, label_name, label_color, label_description
`

type GetLabelStatisticsParams struct {
	WayUuids  []pgtype.UUID    `json:"way_uuids"`
	StartDate pgtype.Timestamp `json:"start_date"`
	EndDate   pgtype.Timestamp `json:"end_date"`
}

type GetLabelStatisticsRow struct {
	LabelUuid            pgtype.UUID `json:"label_uuid"`
	LabelName            string      `json:"label_name"`
	LabelColor           string      `json:"label_color"`
	LabelDescription     string      `json:"label_description"`
	JobsAmount           int64       `json:"jobs_amount"`
	JobsAmountPercentage int32       `json:"jobs_amount_percentage"`
	JobsTime             int32       `json:"jobs_time"`
	JobsTimePercentage   int32       `json:"jobs_time_percentage"`
}

func (q *Queries) GetLabelStatistics(ctx context.Context, arg GetLabelStatisticsParams) ([]GetLabelStatisticsRow, error) {
	rows, err := q.db.Query(ctx, getLabelStatistics, arg.WayUuids, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLabelStatisticsRow{}
	for rows.Next() {
		var i GetLabelStatisticsRow
		if err := rows.Scan(
			&i.LabelUuid,
			&i.LabelName,
			&i.LabelColor,
			&i.LabelDescription,
			&i.JobsAmount,
			&i.JobsAmountPercentage,
			&i.JobsTime,
			&i.JobsTimePercentage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastDayReportDate = `-- name: GetLastDayReportDate :one
WITH way_min_date AS (
    SELECT
        MIN(created_at) AS oldest_way_date
    FROM ways
    WHERE uuid = ANY($1::UUID[])
),
way_max_report AS (
    SELECT
        MAX(created_at) AS youngest_report_date
    FROM day_reports
    WHERE way_uuid = ANY($1::UUID[])
)
SELECT
    (way_max_report.youngest_report_date IS NOT NULL)::BOOLEAN AS is_valid,
    way_min_date.oldest_way_date::TIMESTAMP AS total_start_date,
    way_max_report.youngest_report_date::TIMESTAMP AS end_date
FROM way_min_date
CROSS JOIN way_max_report
`

type GetLastDayReportDateRow struct {
	IsValid        bool             `json:"is_valid"`
	TotalStartDate pgtype.Timestamp `json:"total_start_date"`
	EndDate        pgtype.Timestamp `json:"end_date"`
}

func (q *Queries) GetLastDayReportDate(ctx context.Context, wayUuids []pgtype.UUID) (GetLastDayReportDateRow, error) {
	row := q.db.QueryRow(ctx, getLastDayReportDate, wayUuids)
	var i GetLastDayReportDateRow
	err := row.Scan(&i.IsValid, &i.TotalStartDate, &i.EndDate)
	return i, err
}

const getMentoringWaysByMentorId = `-- name: GetMentoringWaysByMentorId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
FROM ways
JOIN mentor_users_ways ON mentor_users_ways.way_uuid = ways.uuid
WHERE mentor_users_ways.user_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetMentoringWaysByMentorIdRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) GetMentoringWaysByMentorId(ctx context.Context, userUuid pgtype.UUID) ([]GetMentoringWaysByMentorIdRow, error) {
	rows, err := q.db.Query(ctx, getMentoringWaysByMentorId, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMentoringWaysByMentorIdRow{}
	for rows.Next() {
		var i GetMentoringWaysByMentorIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			&i.ChildrenUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOverallInformation = `-- name: GetOverallInformation :one
SELECT
    COALESCE(SUM(job_dones.time), 0)::INTEGER AS total_time,
    COUNT(DISTINCT day_reports.uuid) AS total_reports,
    COUNT(job_dones.uuid) AS finished_jobs,
    COALESCE(
        SUM(job_dones.time) /
        NULLIF(EXTRACT(day FROM (INTERVAL '1 day' + ($1)::timestamp - ($2)::timestamp)), 0)
    , 0)::INTEGER AS average_time_per_calendar_day,
    COALESCE(
        SUM(job_dones.time) /
        NULLIF(COUNT(DISTINCT DATE_TRUNC('day', day_reports.created_at)), 0)
    , 0)::INTEGER AS average_time_per_working_day,
    COALESCE(AVG(job_dones.time), 0)::INTEGER AS average_job_time
FROM day_reports
LEFT JOIN job_dones ON job_dones.day_report_uuid = day_reports.uuid
WHERE day_reports.way_uuid = ANY($3::UUID[])
  AND day_reports.created_at BETWEEN $2 AND $1
`

type GetOverallInformationParams struct {
	EndDate   pgtype.Timestamp `json:"end_date"`
	StartDate pgtype.Timestamp `json:"start_date"`
	WayUuids  []pgtype.UUID    `json:"way_uuids"`
}

type GetOverallInformationRow struct {
	TotalTime                 int32 `json:"total_time"`
	TotalReports              int64 `json:"total_reports"`
	FinishedJobs              int64 `json:"finished_jobs"`
	AverageTimePerCalendarDay int32 `json:"average_time_per_calendar_day"`
	AverageTimePerWorkingDay  int32 `json:"average_time_per_working_day"`
	AverageJobTime            int32 `json:"average_job_time"`
}

func (q *Queries) GetOverallInformation(ctx context.Context, arg GetOverallInformationParams) (GetOverallInformationRow, error) {
	row := q.db.QueryRow(ctx, getOverallInformation, arg.EndDate, arg.StartDate, arg.WayUuids)
	var i GetOverallInformationRow
	err := row.Scan(
		&i.TotalTime,
		&i.TotalReports,
		&i.FinishedJobs,
		&i.AverageTimePerCalendarDay,
		&i.AverageTimePerWorkingDay,
		&i.AverageJobTime,
	)
	return i, err
}

const getOwnWaysByUserId = `-- name: GetOwnWaysByUserId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
FROM ways
WHERE ways.owner_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetOwnWaysByUserIdRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) GetOwnWaysByUserId(ctx context.Context, ownerUuid pgtype.UUID) ([]GetOwnWaysByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getOwnWaysByUserId, ownerUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOwnWaysByUserIdRow{}
	for rows.Next() {
		var i GetOwnWaysByUserIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			&i.ChildrenUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnWaysCountByUserId = `-- name: GetOwnWaysCountByUserId :one
SELECT
    COUNT(*) AS own_ways_count
FROM ways
WHERE owner_uuid = $1
`

func (q *Queries) GetOwnWaysCountByUserId(ctx context.Context, userUuid pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getOwnWaysCountByUserId, userUuid)
	var own_ways_count int64
	err := row.Scan(&own_ways_count)
	return own_ways_count, err
}

const getPrivateWaysCountByUserId = `-- name: GetPrivateWaysCountByUserId :one
SELECT
    COUNT(*) AS private_ways_count
FROM ways
WHERE owner_uuid = $1 AND is_private = TRUE
`

func (q *Queries) GetPrivateWaysCountByUserId(ctx context.Context, userUuid pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getPrivateWaysCountByUserId, userUuid)
	var private_ways_count int64
	err := row.Scan(&private_ways_count)
	return private_ways_count, err
}

const getTimeSpentByDayChart = `-- name: GetTimeSpentByDayChart :many
SELECT
	day_reports.created_at as point_date,
	COALESCE(SUM(job_dones.time), 0)::INTEGER AS point_value
FROM day_reports
LEFT JOIN job_dones ON job_dones.day_report_uuid = day_reports.uuid
WHERE day_reports.way_uuid = ANY($1::UUID[]) AND day_reports.created_at BETWEEN $2 AND $3
GROUP BY point_date
`

type GetTimeSpentByDayChartParams struct {
	WayUuids  []pgtype.UUID    `json:"way_uuids"`
	StartDate pgtype.Timestamp `json:"start_date"`
	EndDate   pgtype.Timestamp `json:"end_date"`
}

type GetTimeSpentByDayChartRow struct {
	PointDate  pgtype.Timestamp `json:"point_date"`
	PointValue int32            `json:"point_value"`
}

func (q *Queries) GetTimeSpentByDayChart(ctx context.Context, arg GetTimeSpentByDayChartParams) ([]GetTimeSpentByDayChartRow, error) {
	rows, err := q.db.Query(ctx, getTimeSpentByDayChart, arg.WayUuids, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTimeSpentByDayChartRow{}
	for rows.Next() {
		var i GetTimeSpentByDayChartRow
		if err := rows.Scan(&i.PointDate, &i.PointValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWayById = `-- name: GetWayById :one
SELECT
    ways.uuid,
    ways.name,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids,
    users.uuid AS owner_uuid,
    users.name AS owner_name,
    users.email AS owner_email,
    users.description AS owner_description,
    users.created_at AS owner_created_at,
    users.image_url AS owner_image_url,
    users.is_mentor AS owner_is_mentor,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $1) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $1 AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = $1) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = $1) AS way_day_reports_amount
FROM ways
JOIN users ON users.uuid = ways.owner_uuid
WHERE ways.uuid = $1
LIMIT 1
`

type GetWayByIdRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	ChildrenUuids       []string         `json:"children_uuids"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	OwnerName           string           `json:"owner_name"`
	OwnerEmail          string           `json:"owner_email"`
	OwnerDescription    string           `json:"owner_description"`
	OwnerCreatedAt      pgtype.Timestamp `json:"owner_created_at"`
	OwnerImageUrl       string           `json:"owner_image_url"`
	OwnerIsMentor       bool             `json:"owner_is_mentor"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
}

func (q *Queries) GetWayById(ctx context.Context, wayUuid pgtype.UUID) (GetWayByIdRow, error) {
	row := q.db.QueryRow(ctx, getWayById, wayUuid)
	var i GetWayByIdRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.CopiedFromWayUuid,
		&i.IsCompleted,
		&i.IsPrivate,
		&i.ChildrenUuids,
		&i.OwnerUuid,
		&i.OwnerName,
		&i.OwnerEmail,
		&i.OwnerDescription,
		&i.OwnerCreatedAt,
		&i.OwnerImageUrl,
		&i.OwnerIsMentor,
		&i.WayMetricsTotal,
		&i.WayMetricsDone,
		&i.WayFavoriteForUsers,
		&i.WayDayReportsAmount,
	)
	return i, err
}

const getWayChildren = `-- name: GetWayChildren :many
SELECT composite_ways.child_uuid
FROM composite_ways
WHERE composite_ways.parent_uuid = $1
`

func (q *Queries) GetWayChildren(ctx context.Context, wayUuid pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getWayChildren, wayUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var child_uuid pgtype.UUID
		if err := rows.Scan(&child_uuid); err != nil {
			return nil, err
		}
		items = append(items, child_uuid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWayRelatedUsers = `-- name: GetWayRelatedUsers :many
SELECT
    users.uuid, users.name, users.email, users.description, users.created_at, users.image_url, users.is_mentor
FROM ways
LEFT JOIN mentor_users_ways ON mentor_users_ways.way_uuid = ways.uuid
LEFT JOIN former_mentors_ways ON former_mentors_ways.way_uuid = ways.uuid
LEFT JOIN users ON users.uuid = mentor_users_ways.user_uuid
	OR users.uuid = former_mentors_ways.former_mentor_uuid
	OR users.uuid = ways.owner_uuid
WHERE ways.uuid = ANY($1::UUID[])
`

type GetWayRelatedUsersRow struct {
	Uuid        pgtype.UUID      `json:"uuid"`
	Name        pgtype.Text      `json:"name"`
	Email       pgtype.Text      `json:"email"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	ImageUrl    pgtype.Text      `json:"image_url"`
	IsMentor    pgtype.Bool      `json:"is_mentor"`
}

func (q *Queries) GetWayRelatedUsers(ctx context.Context, wayUuids []pgtype.UUID) ([]GetWayRelatedUsersRow, error) {
	rows, err := q.db.Query(ctx, getWayRelatedUsers, wayUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWayRelatedUsersRow{}
	for rows.Next() {
		var i GetWayRelatedUsersRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Email,
			&i.Description,
			&i.CreatedAt,
			&i.ImageUrl,
			&i.IsMentor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWaysByCollectionId = `-- name: GetWaysByCollectionId :many
SELECT
    ways.uuid,
    ways.name,
    ways.owner_uuid,
    ways.goal_description,
    ways.updated_at,
    ways.created_at,
    ways.estimation_time,
    ways.copied_from_way_uuid,
    ways.is_completed,
    ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
FROM ways
JOIN way_collections_ways ON way_collections_ways.way_uuid = ways.uuid
WHERE way_collections_ways.way_collection_uuid = $1
ORDER BY ways.updated_at DESC
`

type GetWaysByCollectionIdRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) GetWaysByCollectionId(ctx context.Context, wayCollectionUuid pgtype.UUID) ([]GetWaysByCollectionIdRow, error) {
	rows, err := q.db.Query(ctx, getWaysByCollectionId, wayCollectionUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWaysByCollectionIdRow{}
	for rows.Next() {
		var i GetWaysByCollectionIdRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.OwnerUuid,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			&i.ChildrenUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWays = `-- name: ListWays :many
SELECT
    ways.uuid, ways.name, ways.goal_description, ways.updated_at, ways.created_at, ways.estimation_time, ways.owner_uuid, ways.copied_from_way_uuid, ways.is_completed, ways.is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = ways.uuid AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = ways.uuid) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = ways.uuid) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
FROM ways
WHERE ways.is_private = false
    AND (
        ($1 = 'inProgress' AND ways.is_completed = false AND ways.updated_at > ($2)::timestamp - interval '14 days')
        OR ($1 = 'completed' AND ways.is_completed = true)
        OR ($1 = 'abandoned' AND ways.is_completed = false AND ways.updated_at < ($2)::timestamp - interval '14 days')
        OR ($1 = 'all')
    )
    AND ((
        SELECT COUNT(*)
        FROM day_reports
        WHERE day_reports.way_uuid = ways.uuid
    ) >= $3::integer)
    AND (LOWER(ways.name) LIKE '%' || LOWER($4) || '%' OR $4 = '')
ORDER BY ways.created_at DESC
LIMIT $6
OFFSET $5
`

type ListWaysParams struct {
	Status              interface{}      `json:"status"`
	Date                pgtype.Timestamp `json:"date"`
	MinDayReportsAmount int32            `json:"min_day_reports_amount"`
	WayName             string           `json:"way_name"`
	RequestOffset       int32            `json:"request_offset"`
	RequestLimit        int32            `json:"request_limit"`
}

type ListWaysRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) ListWays(ctx context.Context, arg ListWaysParams) ([]ListWaysRow, error) {
	rows, err := q.db.Query(ctx, listWays,
		arg.Status,
		arg.Date,
		arg.MinDayReportsAmount,
		arg.WayName,
		arg.RequestOffset,
		arg.RequestLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWaysRow{}
	for rows.Next() {
		var i ListWaysRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.GoalDescription,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.EstimationTime,
			&i.OwnerUuid,
			&i.CopiedFromWayUuid,
			&i.IsCompleted,
			&i.IsPrivate,
			&i.WayMetricsTotal,
			&i.WayMetricsDone,
			&i.WayFavoriteForUsers,
			&i.WayDayReportsAmount,
			&i.ChildrenUuids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWay = `-- name: UpdateWay :one
UPDATE ways
SET
    name = coalesce($1, name),
    goal_description = coalesce($2, goal_description),
    updated_at = coalesce($3, updated_at),
    estimation_time = coalesce($4, estimation_time),
    is_private = coalesce($5, is_private),
    is_completed = coalesce($6, is_completed)
WHERE ways.uuid = $7
RETURNING uuid, name, goal_description, updated_at, created_at, estimation_time, owner_uuid, copied_from_way_uuid, is_completed, is_private,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $7) AS way_metrics_total,
    (SELECT COUNT(*) FROM metrics WHERE metrics.way_uuid = $7 AND metrics.is_done = true) AS way_metrics_done,
    (SELECT COUNT(*) FROM favorite_users_ways WHERE favorite_users_ways.way_uuid = $7) AS way_favorite_for_users,
    (SELECT COUNT(*) FROM day_reports WHERE day_reports.way_uuid = $7) AS way_day_reports_amount,
    COALESCE(
        ARRAY(
            SELECT composite_ways.child_uuid
            FROM composite_ways
            WHERE composite_ways.parent_uuid = ways.uuid
        ),
        '{}'
    )::VARCHAR[] AS children_uuids
`

type UpdateWayParams struct {
	Name            pgtype.Text      `json:"name"`
	GoalDescription pgtype.Text      `json:"goal_description"`
	UpdatedAt       pgtype.Timestamp `json:"updated_at"`
	EstimationTime  pgtype.Int4      `json:"estimation_time"`
	IsPrivate       pgtype.Bool      `json:"is_private"`
	IsCompleted     pgtype.Bool      `json:"is_completed"`
	WayUuid         pgtype.UUID      `json:"way_uuid"`
}

type UpdateWayRow struct {
	Uuid                pgtype.UUID      `json:"uuid"`
	Name                string           `json:"name"`
	GoalDescription     string           `json:"goal_description"`
	UpdatedAt           pgtype.Timestamp `json:"updated_at"`
	CreatedAt           pgtype.Timestamp `json:"created_at"`
	EstimationTime      int32            `json:"estimation_time"`
	OwnerUuid           pgtype.UUID      `json:"owner_uuid"`
	CopiedFromWayUuid   pgtype.UUID      `json:"copied_from_way_uuid"`
	IsCompleted         bool             `json:"is_completed"`
	IsPrivate           bool             `json:"is_private"`
	WayMetricsTotal     int64            `json:"way_metrics_total"`
	WayMetricsDone      int64            `json:"way_metrics_done"`
	WayFavoriteForUsers int64            `json:"way_favorite_for_users"`
	WayDayReportsAmount int64            `json:"way_day_reports_amount"`
	ChildrenUuids       []string         `json:"children_uuids"`
}

func (q *Queries) UpdateWay(ctx context.Context, arg UpdateWayParams) (UpdateWayRow, error) {
	row := q.db.QueryRow(ctx, updateWay,
		arg.Name,
		arg.GoalDescription,
		arg.UpdatedAt,
		arg.EstimationTime,
		arg.IsPrivate,
		arg.IsCompleted,
		arg.WayUuid,
	)
	var i UpdateWayRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.GoalDescription,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.EstimationTime,
		&i.OwnerUuid,
		&i.CopiedFromWayUuid,
		&i.IsCompleted,
		&i.IsPrivate,
		&i.WayMetricsTotal,
		&i.WayMetricsDone,
		&i.WayFavoriteForUsers,
		&i.WayDayReportsAmount,
		&i.ChildrenUuids,
	)
	return i, err
}
