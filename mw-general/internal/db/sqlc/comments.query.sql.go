// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
WITH way_info AS (
    SELECT
        ways.uuid AS way_uuid,
        ways.name AS way_name
    FROM day_reports
    INNER JOIN ways ON ways.uuid = day_reports.way_uuid
    WHERE day_reports.uuid = $5
),
owner_info AS (
    SELECT name AS owner_name
    FROM users
    WHERE uuid = $4
)
INSERT INTO comments(
    created_at,
    updated_at,
    description,
    owner_uuid,
    day_report_uuid
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING uuid, created_at, updated_at, description, owner_uuid, day_report_uuid,
    (SELECT way_uuid FROM way_info) AS way_uuid,
    (SELECT way_name FROM way_info) AS way_name,
    (SELECT owner_name FROM owner_info) AS owner_name
`

type CreateCommentParams struct {
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
}

type CreateCommentRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	WayUuid       pgtype.UUID      `json:"way_uuid"`
	WayName       string           `json:"way_name"`
	OwnerName     string           `json:"owner_name"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.OwnerUuid,
		arg.DayReportUuid,
	)
	var i CreateCommentRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.WayUuid,
		&i.WayName,
		&i.OwnerName,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE uuid = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteComment, commentUuid)
	return err
}

const getIsUserHavingPermissionsForComment = `-- name: GetIsUserHavingPermissionsForComment :one
SELECT
    ways.uuid as way_uuid,
    EXISTS (
        SELECT 1
        FROM mentor_users_ways
        WHERE mentor_users_ways.way_uuid = ways.uuid
        AND mentor_users_ways.user_uuid = $1
    ) OR ways.owner_uuid = $1 AS is_permission_given
FROM ways
INNER JOIN day_reports ON ways.uuid = day_reports.way_uuid
INNER JOIN comments ON comments.day_report_uuid = day_reports.uuid
WHERE comments.uuid = $2
`

type GetIsUserHavingPermissionsForCommentParams struct {
	UserUuid    pgtype.UUID `json:"user_uuid"`
	CommentUuid pgtype.UUID `json:"comment_uuid"`
}

type GetIsUserHavingPermissionsForCommentRow struct {
	WayUuid           pgtype.UUID `json:"way_uuid"`
	IsPermissionGiven pgtype.Bool `json:"is_permission_given"`
}

func (q *Queries) GetIsUserHavingPermissionsForComment(ctx context.Context, arg GetIsUserHavingPermissionsForCommentParams) (GetIsUserHavingPermissionsForCommentRow, error) {
	row := q.db.QueryRow(ctx, getIsUserHavingPermissionsForComment, arg.UserUuid, arg.CommentUuid)
	var i GetIsUserHavingPermissionsForCommentRow
	err := row.Scan(&i.WayUuid, &i.IsPermissionGiven)
	return i, err
}

const getListCommentsByDayReportUuids = `-- name: GetListCommentsByDayReportUuids :many
SELECT
    comments.uuid, comments.created_at, comments.updated_at, comments.description, comments.owner_uuid, comments.day_report_uuid
FROM comments
JOIN users ON comments.owner_uuid = users.uuid
WHERE day_report_uuid = ANY($1::UUID[])
ORDER BY comments.created_at
`

func (q *Queries) GetListCommentsByDayReportUuids(ctx context.Context, dayReportUuids []pgtype.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getListCommentsByDayReportUuids, dayReportUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.OwnerUuid,
			&i.DayReportUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
WITH way_info AS (
    SELECT
        ways.uuid AS way_uuid,
        ways.name AS way_name
    FROM day_reports
    INNER JOIN ways ON ways.uuid = day_reports.way_uuid
    WHERE day_reports.uuid = (SELECT day_report_uuid FROM comments WHERE uuid =  $3)
),
owner_info AS (
    SELECT name AS owner_name
    FROM users
    WHERE uuid = (SELECT owner_uuid FROM comments WHERE uuid = $3)
)
UPDATE comments
SET
updated_at = coalesce($1, updated_at),
description = coalesce($2, description)
WHERE comments.uuid = $3
RETURNING uuid, created_at, updated_at, description, owner_uuid, day_report_uuid,
    (SELECT way_uuid FROM way_info) AS way_uuid,
    (SELECT way_name FROM way_info) AS way_name,
    (SELECT owner_name FROM owner_info) AS owner_name
`

type UpdateCommentParams struct {
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Description pgtype.Text      `json:"description"`
	CommentUuid pgtype.UUID      `json:"comment_uuid"`
}

type UpdateCommentRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	WayUuid       pgtype.UUID      `json:"way_uuid"`
	WayName       string           `json:"way_name"`
	OwnerName     string           `json:"owner_name"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (UpdateCommentRow, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.UpdatedAt, arg.Description, arg.CommentUuid)
	var i UpdateCommentRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.WayUuid,
		&i.WayName,
		&i.OwnerName,
	)
	return i, err
}
