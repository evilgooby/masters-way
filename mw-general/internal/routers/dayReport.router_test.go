package routers

import (
	"context"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/assert"
	openapiGeneral "mwserver/apiAutogenerated/general"
	"net/http"

	"mwserver/internal/auth"
	"mwserver/internal/config"
	"mwserver/internal/openapi"
	"testing"
)

func TestCreateDayReport(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	user := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	wayID := "9972552a-c0b3-41f3-b464-284d36a36964"

	t.Run("should get all ways successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(user, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)

		request := openapiGeneral.SchemasCreateDayReportPayload{WayUuid: wayID}

		report, response, err := generalApi.DayReportAPI.CreateDayReport(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create report: %v", err)
		}

		expectedData := &openapiGeneral.SchemasCompositeDayReportPopulatedResponse{
			CompositionParticipants: []openapiGeneral.SchemasDayReportsCompositionParticipants{
				{
					WayId:   wayID,
					WayName: "ronnie stanton way",
				},
			},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)

		isNameExists := false
		isWayIDExists := false

		for _, expCompositionParticipants := range expectedData.CompositionParticipants {
			for _, reportCompositionParticipants := range report.CompositionParticipants {
				if expCompositionParticipants.WayName == reportCompositionParticipants.WayName {
					isNameExists = true
					break
				}
			}

			for _, reportCompositionParticipants := range report.CompositionParticipants {
				if expCompositionParticipants.WayId == reportCompositionParticipants.WayId {
					isWayIDExists = true
					break
				}
			}
		}

		if !isNameExists || !isWayIDExists {
			t.Fatalf("Failed to create report")
		}
	})
}

func TestGetDayReports(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	user := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	wayID := "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91"

	t.Run("should get all ways successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(user, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		report, response, err := generalApi.DayReportAPI.GetDayReports(ctx, wayID).Execute()
		if err != nil {
			t.Fatalf("Failed to create report: %v", err)
		}

		expectedData := openapiGeneral.SchemasListDayReportsResponse{
			DayReports: []openapiGeneral.SchemasCompositeDayReportPopulatedResponse{
				{
					Comments: []openapiGeneral.SchemasCommentPopulatedResponse{
						{
							CreatedAt:     "2024-08-01T00:00:00.000Z",
							DayReportUuid: "25ceb64e-7a57-4ce0-a4fd-45982d9fce38",
							Description:   "this is amazing!!",
							OwnerName:     "Dana Evans",
							OwnerUuid:     "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1",
							UpdatedAt:     "2024-08-01T00:00:00.000Z",
							Uuid:          "f6334156-b08b-434b-b983-f8b11e422804",
							WayName:       "alice johnson",
							WayUuid:       "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
						},
					},
					CompositionParticipants: []openapiGeneral.SchemasDayReportsCompositionParticipants{
						{
							DayReportId: "25ceb64e-7a57-4ce0-a4fd-45982d9fce38",
							WayId:       "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
							WayName:     "alice johnson",
						},
					},
					JobsDone: []openapiGeneral.SchemasJobDonePopulatedResponse{
						{
							CreatedAt:     "2024-08-01T12:40:00.000Z",
							DayReportUuid: "25ceb64e-7a57-4ce0-a4fd-45982d9fce38",
							Description:   "this is finished job description",
							OwnerName:     "Dana Evans",
							OwnerUuid:     "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1",
							Tags:          []openapiGeneral.SchemasJobTagResponse{},
							Time:          1000,
							UpdatedAt:     "2024-08-01T12:40:00.000Z",
							Uuid:          "8563a330-eedb-4e71-9abc-4db6fbabd13b",
							WayName:       "alice johnson",
							WayUuid:       "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
						},
					},
					Plans: []openapiGeneral.SchemasPlanPopulatedResponse{
						{
							CreatedAt:     "2024-08-01T00:00:00.000Z",
							DayReportUuid: "25ceb64e-7a57-4ce0-a4fd-45982d9fce38",
							Description:   "i want to eat",
							IsDone:        false,
							OwnerName:     "Dana Evans",
							OwnerUuid:     "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1",
							Tags: []openapiGeneral.SchemasJobTagResponse{
								{
									Color:       "green",
									Description: "this is not my tag",
									Name:        "test label 2",
									Uuid:        "60c1d2ff-37ea-4a30-978b-c3d633317370",
								},
							},
							Time:      400,
							UpdatedAt: "2024-08-01T00:00:00.000Z",
							Uuid:      "18cbbee6-5071-4608-b349-ffad514711cb",
							WayName:   "alice johnson",
							WayUuid:   "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
						},
					},
					Problems: []openapiGeneral.SchemasProblemPopulatedResponse{
						{
							CreatedAt:     "2024-08-01T00:00:00.000Z",
							DayReportUuid: "25ceb64e-7a57-4ce0-a4fd-45982d9fce38",
							Description:   "this is the biggest problem we have faced so far",
							IsDone:        false,
							OwnerName:     "Dana Evans",
							OwnerUuid:     "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1",
							UpdatedAt:     "2024-08-01T00:00:00.000Z",
							Uuid:          "47ff13e9-aedc-47aa-9dad-d219fb92b694",
							WayName:       "alice johnson",
							WayUuid:       "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
						},
					},
				},
			},
			Size: 1,
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.Size, report.Size)

		assert.True(t, cmp.Equal(expectedData, *report, cmpopts.IgnoreFields(openapiGeneral.SchemasCompositeDayReportPopulatedResponse{}, "Uuid", "CreatedAt", "UpdatedAt")), "Structures should match except for UUID, CreatedAt, and UpdatedAt")
	})
}
