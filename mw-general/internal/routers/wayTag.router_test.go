package routers

import (
	"context"
	"github.com/stretchr/testify/assert"
	openapiGeneral "mwserver/apiAutogenerated/general"
	"mwserver/internal/auth"
	"mwserver/internal/config"
	"mwserver/internal/openapi"
	"net/http"
	"testing"
)

func TestAddWayTagToWay(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	user := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"

	t.Run("should get all ways successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(user, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)

		request := openapiGeneral.SchemasCreateWayTagPayload{
			Name:    "New WayTag",
			WayUuid: "9972552a-c0b3-41f3-b464-284d36a36964",
		}

		wayTag, response, err := generalApi.WayTagAPI.CreateWayTag(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create WayTag: %v", err)
		}

		expectedData := openapiGeneral.SchemasWayTagResponse{
			Name: "New WayTag",
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.Name, wayTag.Name)
	})
}

func TestDeleteWayTagFromWayByTagId(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	user := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	wayTagID := "46d5dd00-75fc-4563-9616-5252a6fa05d3"
	wayID := "a2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"

	t.Run("should get all ways successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(user, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		response, err := generalApi.WayTagAPI.DeleteWayTag(ctx, wayTagID, wayID).Execute()

		assert.Equal(t, http.StatusNoContent, response.StatusCode)

		way, _, err := generalApi.WayAPI.GetWayByUuid(ctx, wayID).Execute()
		var expectedData []openapiGeneral.SchemasWayTagResponse

		assert.ElementsMatch(t, expectedData, way.WayTags)
	})
}
