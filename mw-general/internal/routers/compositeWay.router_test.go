package routers

import (
	"context"
	"github.com/stretchr/testify/assert"
	openapiGeneral "mwserver/apiAutogenerated/general"
	"mwserver/internal/auth"
	"mwserver/internal/config"
	"mwserver/internal/openapi"
	"net/http"
	"testing"
)

func TestAddWayToCompositeWay(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	user := "7cdb041b-4574-4f7b-a500-c53e74c72e94"
	childWayID := "32cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	parentWayID := "77482c3f-cae6-494d-be1d-d06c1e84450b"

	t.Run("should create plan job tag successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(user, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}
		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)

		request := openapiGeneral.SchemasAddWayToCompositeWayPayload{
			ChildWayUuid:  childWayID,
			ParentWayUuid: parentWayID,
		}
		compositeWay, response, err := generalApi.CompositeWayAPI.CreateCompositeWay(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create composite Way: %v", err)
		}

		expectedData := &openapiGeneral.SchemasCompositeWayRelation{
			ChildWayUuid:  childWayID,
			ParentWayUuid: parentWayID,
		}

		way, _, err := generalApi.WayAPI.GetWayByUuid(ctx, parentWayID).Execute()

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData, compositeWay)

		isChildExists := false
		for _, child := range way.Children {
			if child.Uuid == childWayID {
				isChildExists = true
				break
			}
		}

		if !isChildExists {
			t.Fatalf("childWayID %s does not exist for this user", childWayID)
		}
	})
}

func TestDeleteCompositeWayRelation(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	user := "7cdb041b-4574-4f7b-a500-c53e74c72e94"
	childWayID := "32cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	parentWayID := "77482c3f-cae6-494d-be1d-d06c1e84450b"

	t.Run("should create plan job tag successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(user, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}
		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		response, err := generalApi.CompositeWayAPI.DeleteCompositeWayRelation(ctx, parentWayID, childWayID).Execute()
		if err != nil {
			t.Fatalf("Failed to delete composite Way: %v", err)
		}

		way, _, err := generalApi.WayAPI.GetWayByUuid(ctx, parentWayID).Execute()

		assert.Equal(t, http.StatusNoContent, response.StatusCode)

		isChildExists := false
		for _, child := range way.Children {
			if child.Uuid == childWayID {
				isChildExists = true
				break
			}
		}

		if isChildExists {
			t.Fatalf("childWayID %s exists for this user", childWayID)
		}
	})
}
