package routers

import (
	"context"
	"mwserver/internal/auth"
	"mwserver/internal/config"
	"mwserver/internal/openapi"
	"net/http"
	"testing"

	openapiGeneral "mwserver/apiAutogenerated/general"

	"github.com/stretchr/testify/assert"
)

func TestCreateWayCollection(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	currentUserID := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	wayCollectionName := "Test way collection"

	t.Run("should create a custom collection by user id and return it successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(currentUserID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		request := openapiGeneral.SchemasCreateWayCollectionPayload{
			Name:      wayCollectionName,
			OwnerUuid: currentUserID,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		wayCollectionResponse, response, err := generalApi.WayCollectionAPI.CreateWayCollection(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create WayCollection: %v", err)
		}

		expectedData := &openapiGeneral.SchemasWayCollectionPopulatedResponse{
			Name:      wayCollectionName,
			OwnerUuid: currentUserID,
			Type:      "custom",
			Ways:      []openapiGeneral.SchemasWayPlainResponse{},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.Name, wayCollectionResponse.Name)
		assert.Equal(t, expectedData.OwnerUuid, wayCollectionResponse.OwnerUuid)
		assert.Equal(t, expectedData.Type, wayCollectionResponse.Type)
		assert.Equal(t, expectedData.Ways, wayCollectionResponse.Ways)
	})
}

func TestUpdateWayCollection(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	currentUserID := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	wayCollectionID := "30dbf616-b055-4d65-8c0c-e6a913fc119a"
	wayCollectionName := "30dbf616-b055-4d65-8c0c-e6a913fc119a"

	t.Run("should update custom collection name by user id and return it successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(currentUserID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		request := openapiGeneral.SchemasUpdateWayCollectionPayload{
			Name: &wayCollectionName,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		wayCollectionResponse, response, err := generalApi.WayCollectionAPI.UpdateWayCollection(ctx, wayCollectionID).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to update WayCollection name: %v", err)
		}

		expectedData := &openapiGeneral.SchemasWayCollectionPlainResponse{
			Name: wayCollectionName,
			Uuid: wayCollectionID,
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.Uuid, wayCollectionResponse.Uuid)
		assert.Equal(t, expectedData.Name, wayCollectionResponse.Name)
	})
}

func TestDeleteWayCollectionById(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	currentUserID := "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1"
	wayCollectionID := "30dbf616-b055-4d65-8c0c-e6a913fc119a"

	t.Run("should delete a custom collection by id successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(currentUserID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		response, err := generalApi.WayCollectionAPI.DeleteWayCollection(ctx, wayCollectionID).Execute()
		if err != nil {
			t.Fatalf("Failed to create WayCollection: %v", err)
		}

		assert.Equal(t, http.StatusNoContent, response.StatusCode)

		expectedData := &openapiGeneral.SchemasUserPopulatedResponse{
			CustomWayCollections: []openapiGeneral.SchemasWayCollectionPopulatedResponse{},
			Uuid:                 currentUserID,
		}

		user, userResponse, err := generalApi.UserAPI.GetUserByUuid(ctx, currentUserID).Execute()
		if err != nil {
			t.Fatalf("Failed to get user: %v", err)
		}

		assert.Equal(t, userResponse.StatusCode, userResponse.StatusCode)
		assert.Equal(t, expectedData.Uuid, user.Uuid)
		for _, customWayCollections := range user.CustomWayCollections {
			// Search needed WayCollection by id, to make sure that it was deleted
			if customWayCollections.Uuid == wayCollectionID {
				t.Fatalf("WayCollectionID %s wasn't removed", wayCollectionID)
			}
		}
	})
}
