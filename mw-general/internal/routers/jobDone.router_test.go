package routers

import (
	"context"
	openapiGeneral "mwserver/apiAutogenerated/general"
	"mwserver/internal/auth"
	"mwserver/internal/config"
	"mwserver/internal/openapi"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCreateJobDone(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	userID := "3d922e8a-5d58-4b82-9a3d-83e2e73b3f91"
	dayReportID := "25ceb64e-7a57-4ce0-a4fd-45982d9fce38"
	description := "Test description"
	ownerID := "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1"

	t.Run("should create JobDone and return it successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(userID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		request := openapiGeneral.SchemasCreateJobDonePayload{
			DayReportUuid: dayReportID,
			Description:   description,
			JobTagUuids:   []string{},
			OwnerUuid:     ownerID,
			Time:          0,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		jobDone, response, err := generalApi.JobDoneAPI.CreateJobDone(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create JobDone: %v", err)
		}

		expectedData := &openapiGeneral.SchemasJobDonePopulatedResponse{
			DayReportUuid: dayReportID,
			Description:   description,
			OwnerName:     "Dana Evans",
			OwnerUuid:     ownerID,
			Tags:          []openapiGeneral.SchemasJobTagResponse{},
			Time:          0,
			WayName:       "alice johnson",
			WayUuid:       "1d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.DayReportUuid, jobDone.DayReportUuid)
		assert.Equal(t, expectedData.Description, jobDone.Description)
		assert.Equal(t, expectedData.OwnerName, jobDone.OwnerName)
		assert.Equal(t, expectedData.OwnerUuid, jobDone.OwnerUuid)
		assert.Equal(t, expectedData.Tags, jobDone.Tags)
		assert.Equal(t, expectedData.Time, jobDone.Time)
		assert.Equal(t, expectedData.WayName, jobDone.WayName)
		assert.Equal(t, expectedData.WayUuid, jobDone.WayUuid)
	})
}

func TestUpdateJobDone(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	userID := "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1"
	jobDoneID := "40a1d6c8-2932-46bd-8e29-f6886ec171f4"

	t.Run("should update JobDone and return it successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(userID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		var newTime int32 = 50
		newDescription := "new description"

		request := openapiGeneral.SchemasUpdateJobDone{
			Description: &newDescription,
			Time:        &newTime,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		jobDone, response, err := generalApi.JobDoneAPI.UpdateJobDone(ctx, jobDoneID).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create JobDone: %v", err)
		}

		expectedData := &openapiGeneral.SchemasJobDonePopulatedResponse{
			Uuid:          "40a1d6c8-2932-46bd-8e29-f6886ec171f4",
			CreatedAt:     "2024-08-14T00:00:01.000Z",
			Description:   "new description",
			Time:          50,
			OwnerUuid:     "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1",
			OwnerName:     "Dana Evans",
			DayReportUuid: "7d563ccb-15fc-4d5a-b0cb-27ec86e052ab",
			WayUuid:       "9230479a-a481-4f83-b770-138ef4f3139c",
			WayName:       "dana evans way 3",
			Tags:          []openapiGeneral.SchemasJobTagResponse{},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.Uuid, jobDone.Uuid)
		assert.Equal(t, expectedData.CreatedAt, jobDone.CreatedAt)
		assert.Equal(t, expectedData.Description, jobDone.Description)
		assert.Equal(t, expectedData.Time, jobDone.Time)
		assert.Equal(t, expectedData.OwnerUuid, jobDone.OwnerUuid)
		assert.Equal(t, expectedData.OwnerName, jobDone.OwnerName)
		assert.Equal(t, expectedData.DayReportUuid, jobDone.DayReportUuid)
		assert.Equal(t, expectedData.WayUuid, jobDone.WayUuid)
		assert.Equal(t, expectedData.WayName, jobDone.WayName)
		assert.Equal(t, expectedData.Tags, jobDone.Tags)
	})
}

func TestDeleteJobDoneById(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	userID := "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1"
	jobDoneID := "40a1d6c8-2932-46bd-8e29-f6886ec171f4"

	t.Run("should delete JobDone successfully", func(t *testing.T) {
		token, err := auth.GenerateJWT(userID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		response, err := generalApi.JobDoneAPI.DeleteJobDone(ctx, jobDoneID).Execute()

		assert.Equal(t, http.StatusNoContent, response.StatusCode)

		wayID := "9230479a-a481-4f83-b770-138ef4f3139c"
		dayReports, response, err := generalApi.DayReportAPI.GetDayReports(ctx, wayID).Execute()

		isExists := false
		for _, report := range dayReports.DayReports {
			for i := range report.Plans {
				if report.JobsDone[i].Uuid == jobDoneID {
					isExists = true
					break
				}
			}
		}

		if isExists {
			t.Fatalf("JobDone %s wasn't removed", jobDoneID)
		}
	})
}
