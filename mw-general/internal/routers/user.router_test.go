package routers

import (
	"context"
	openapiGeneral "mwserver/apiAutogenerated/general"
	"mwserver/internal/auth"
	"mwserver/internal/config"
	"mwserver/internal/openapi"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetAllUsers(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	t.Run("should return and validate the response for all users with pagination and filtering", func(t *testing.T) {
		allUsersResponse, response, err := generalApi.UserAPI.GetAllUsers(context.Background()).Page(1).Limit(10).Email("").Name("").MentorStatus("all").Execute()
		if err != nil {
			t.Fatalf("Failed to get all Users: %v", err)
		}

		expectedData := &openapiGeneral.SchemasGetAllUsersResponse{
			Size: 12,
			Users: []openapiGeneral.SchemasUserPlainResponseWithInfo{
				{
					Uuid:             "7cdb041b-4574-4f7b-a500-c53e74c72e94",
					Name:             "John Doe",
					Email:            "john.doe@example.com",
					Description:      "A brief description about John.",
					CreatedAt:        "2024-07-08T10:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
					IsMentor:         false,
					FavoriteForUsers: 0,
					FavoriteWays:     0,
					MentoringWays:    0,
					OwnWays:          4,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "8e77b89d-57c4-4b7f-8cd4-8dfc6bcb7d1b",
					Name:             "Jane Smith",
					Email:            "jane.smith@example.com",
					Description:      "A brief description about Jane.",
					CreatedAt:        "2024-07-08T05:50:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
					IsMentor:         true,
					FavoriteForUsers: 1,
					FavoriteWays:     0,
					MentoringWays:    2,
					OwnWays:          2,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "3d922e8a-5d58-4b82-9a3d-83e2e73b3f91",
					Name:             "Alice Johnson",
					Email:            "alice.johnson@example.com",
					Description:      "A brief description about Alice.",
					CreatedAt:        "2024-07-08T05:10:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
					IsMentor:         true,
					FavoriteForUsers: 0,
					FavoriteWays:     1,
					MentoringWays:    1,
					OwnWays:          3,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2",
					Name:             "Bob Brown",
					Email:            "bob.brown@example.com",
					Description:      "A brief description about Bob.",
					CreatedAt:        "2024-07-07T00:40:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
					IsMentor:         false,
					FavoriteForUsers: 1,
					FavoriteWays:     0,
					MentoringWays:    0,
					OwnWays:          3,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "5a31e3cb-7e9a-41e5-9a3b-1f1e5d6b7c3e",
					Name:             "Charlie Davis",
					Email:            "charlie.davis@example.com",
					Description:      "A brief description about Charlie.",
					CreatedAt:        "2024-07-06T21:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
					IsMentor:         true,
					FavoriteForUsers: 0,
					FavoriteWays:     0,
					MentoringWays:    0,
					OwnWays:          0,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "d63d2f89-6412-4324-8587-7061bf02dca4",
					Name:             "Ronnie Stanton",
					Email:            "ronnie.stanton@example.com",
					Description:      "A brief description about Ronnie.",
					CreatedAt:        "2024-07-06T10:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAN",
					IsMentor:         false,
					FavoriteForUsers: 0,
					FavoriteWays:     0,
					MentoringWays:    1,
					OwnWays:          1,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "1b3d5e7f-5a1e-4d3a-b1a5-d1a1d5b7a7e1",
					Name:             "Dana Evans",
					Email:            "dana.evans@example.com",
					Description:      "A brief description about Dana.",
					CreatedAt:        "2024-07-06T05:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
					IsMentor:         true,
					FavoriteForUsers: 1,
					FavoriteWays:     0,
					MentoringWays:    1,
					OwnWays:          4,
					Tags: []openapiGeneral.SchemasUserTagResponse{
						{
							Name: "some tag",
							Uuid: "8749d799-0a89-4ffd-b1bd-02ada9234e5a",
						},
					},
				},
				{
					Uuid:             "956d5d97-a977-433a-b872-a2fcf76f3876",
					Name:             "Simon Abramowitz",
					Email:            "simon.abramowitz@example.com",
					Description:      "A brief description about Simon.",
					CreatedAt:        "2024-07-05T04:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAD",
					IsMentor:         false,
					FavoriteForUsers: 0,
					FavoriteWays:     0,
					MentoringWays:    0,
					OwnWays:          0,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "c31384a6-b811-4a1f-befa-95dd53e3f4b9",
					Name:             "Celine Vinje",
					Email:            "celine.vinje@example.com",
					Description:      "A brief description about Celine.",
					CreatedAt:        "2024-07-04T03:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAF",
					IsMentor:         false,
					FavoriteForUsers: 0,
					FavoriteWays:     0,
					MentoringWays:    0,
					OwnWays:          0,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
				{
					Uuid:             "45bf9107-83fd-4fc4-8173-a13b8a100f2a",
					Name:             "Bernardo Fallaci",
					Email:            "bernardo.fallaci@example.com",
					Description:      "A brief description about Bernardo.",
					CreatedAt:        "2024-07-03T01:00:00.000Z",
					ImageUrl:         "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAG",
					IsMentor:         false,
					FavoriteForUsers: 0,
					FavoriteWays:     0,
					MentoringWays:    0,
					OwnWays:          0,
					Tags:             []openapiGeneral.SchemasUserTagResponse{},
				},
			},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData, allUsersResponse)
	})
}

func TestGetUserById(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	userID := "7cdb041b-4574-4f7b-a500-c53e74c72e94"

	t.Run("should return the correct userPopulatedResponse when a valid user ID is provided", func(t *testing.T) {
		allUsersResponse, response, err := generalApi.UserAPI.GetUserByUuid(context.Background(), userID).Execute()
		if err != nil {
			t.Fatalf("Failed to get User by id: %v", err)
		}

		nullableCopiedFromWayUUID := openapiGeneral.NullableString{}
		nullableCopiedFromWayUUID.Set(nil)
		expectedData := &openapiGeneral.SchemasUserPopulatedResponse{
			CreatedAt:            "2024-07-08T10:00:00.000Z",
			CustomWayCollections: []openapiGeneral.SchemasWayCollectionPopulatedResponse{},
			DefaultWayCollections: openapiGeneral.SchemasDefaultWayCollections{
				Own: openapiGeneral.SchemasWayCollectionPopulatedResponse{
					Uuid: "00000000-0000-0000-0000-00000000001",
					Name: "Own",
					Ways: []openapiGeneral.SchemasWayPlainResponse{
						{
							Uuid:            "550e8400-e29b-41d4-a716-446655440000",
							Name:            "john doe way",
							GoalDescription: "john doe goal",
							UpdatedAt:       "2024-07-09T00:00:00.000Z",
							CreatedAt:       "2024-07-09T00:00:00.000Z",
							EstimationTime:  10101010,
							IsCompleted:     false,
							Owner: openapiGeneral.SchemasUserPlainResponse{
								Uuid:        "7cdb041b-4574-4f7b-a500-c53e74c72e94",
								Name:        "John Doe",
								Email:       "john.doe@example.com",
								Description: "A brief description about John.",
								CreatedAt:   "2024-07-08T10:00:00.000Z",
								ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
								IsMentor:    false,
							},
							CopiedFromWayUuid: nullableCopiedFromWayUUID,
							IsPrivate:         false,
							FavoriteForUsers:  0,
							DayReportsAmount:  8,
							Mentors: []openapiGeneral.SchemasUserPlainResponse{
								{
									Uuid:        "d63d2f89-6412-4324-8587-7061bf02dca4",
									Name:        "Ronnie Stanton",
									Email:       "ronnie.stanton@example.com",
									Description: "A brief description about Ronnie.",
									CreatedAt:   "2024-07-06T10:00:00.000Z",
									ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAN",
									IsMentor:    false,
								},
							},
							WayTags:       []openapiGeneral.SchemasWayTagResponse{},
							MetricsDone:   0,
							MetricsTotal:  0,
							ChildrenUuids: []string{},
						},
						{
							Uuid:            "54910bd4-ad28-44f4-a669-f233861cf816",
							Name:            "john doe way 1",
							GoalDescription: "john doe goal 1",
							UpdatedAt:       "2024-07-09T00:00:00.000Z",
							CreatedAt:       "2024-07-09T00:00:00.000Z",
							EstimationTime:  10101010,
							IsCompleted:     false,
							Owner: openapiGeneral.SchemasUserPlainResponse{
								Uuid:        "7cdb041b-4574-4f7b-a500-c53e74c72e94",
								Name:        "John Doe",
								Email:       "john.doe@example.com",
								Description: "A brief description about John.",
								CreatedAt:   "2024-07-08T10:00:00.000Z",
								ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
								IsMentor:    false,
							},
							CopiedFromWayUuid: nullableCopiedFromWayUUID,
							IsPrivate:         false,
							FavoriteForUsers:  0,
							DayReportsAmount:  8,
							Mentors:           []openapiGeneral.SchemasUserPlainResponse{},
							WayTags:           []openapiGeneral.SchemasWayTagResponse{},
							MetricsDone:       0,
							MetricsTotal:      0,
							ChildrenUuids:     []string{},
						},
						{
							Uuid:            "d6d46085-8ce6-4df1-8463-3e469c240076",
							Name:            "john doe composite way 1",
							GoalDescription: "john doe composite way",
							UpdatedAt:       "2024-07-09T00:00:00.000Z",
							CreatedAt:       "2024-07-09T00:00:00.000Z",
							EstimationTime:  10101010,
							IsCompleted:     false,
							Owner: openapiGeneral.SchemasUserPlainResponse{
								Uuid:        "7cdb041b-4574-4f7b-a500-c53e74c72e94",
								Name:        "John Doe",
								Email:       "john.doe@example.com",
								Description: "A brief description about John.",
								CreatedAt:   "2024-07-08T10:00:00.000Z",
								ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
								IsMentor:    false,
							},
							CopiedFromWayUuid: nullableCopiedFromWayUUID,
							IsPrivate:         false,
							FavoriteForUsers:  0,
							DayReportsAmount:  1,
							Mentors:           []openapiGeneral.SchemasUserPlainResponse{},
							WayTags:           []openapiGeneral.SchemasWayTagResponse{},
							MetricsDone:       0,
							MetricsTotal:      0,
							ChildrenUuids: []string{
								"550e8400-e29b-41d4-a716-446655440000",
								"54910bd4-ad28-44f4-a669-f233861cf816",
							},
						},
						{
							Uuid:            "a73c4484-0a44-4e57-8183-aea93a4ccbbb",
							Name:            "john doe composite way",
							GoalDescription: "john doe composite way",
							UpdatedAt:       "2024-07-09T00:00:00.000Z",
							CreatedAt:       "2024-07-09T00:00:00.000Z",
							EstimationTime:  10101010,
							IsCompleted:     false,
							Owner: openapiGeneral.SchemasUserPlainResponse{
								Uuid:        "7cdb041b-4574-4f7b-a500-c53e74c72e94",
								Name:        "John Doe",
								Email:       "john.doe@example.com",
								Description: "A brief description about John.",
								CreatedAt:   "2024-07-08T10:00:00.000Z",
								ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
								IsMentor:    false,
							},
							CopiedFromWayUuid: nullableCopiedFromWayUUID,
							IsPrivate:         false,
							FavoriteForUsers:  0,
							DayReportsAmount:  0,
							Mentors:           []openapiGeneral.SchemasUserPlainResponse{},
							WayTags:           []openapiGeneral.SchemasWayTagResponse{},
							MetricsDone:       0,
							MetricsTotal:      0,
							ChildrenUuids:     []string{},
						},
					},
					CreatedAt: "2024-07-08T10:00:00.000Z",
					UpdatedAt: "2024-07-08T10:00:00.000Z",
					OwnerUuid: "7cdb041b-4574-4f7b-a500-c53e74c72e94",
					Type:      "own",
				},
				Favorite: openapiGeneral.SchemasWayCollectionPopulatedResponse{
					Uuid:      "00000000-0000-0000-0000-00000000003",
					Name:      "Favorite",
					Ways:      []openapiGeneral.SchemasWayPlainResponse{},
					CreatedAt: "2024-07-08T10:00:00.000Z",
					UpdatedAt: "2024-07-08T10:00:00.000Z",
					OwnerUuid: "7cdb041b-4574-4f7b-a500-c53e74c72e94",
					Type:      "favorite",
				},
				Mentoring: openapiGeneral.SchemasWayCollectionPopulatedResponse{
					Uuid:      "00000000-0000-0000-0000-00000000002",
					Name:      "Mentoring",
					Ways:      []openapiGeneral.SchemasWayPlainResponse{},
					CreatedAt: "2024-07-08T10:00:00.000Z",
					UpdatedAt: "2024-07-08T10:00:00.000Z",
					OwnerUuid: "7cdb041b-4574-4f7b-a500-c53e74c72e94",
					Type:      "mentoring",
				},
			},
			Description:      "A brief description about John.",
			Email:            "john.doe@example.com",
			FavoriteForUsers: []string{},
			FavoriteUsers: []openapiGeneral.SchemasUserPlainResponse{
				{
					Uuid:        "8e77b89d-57c4-4b7f-8cd4-8dfc6bcb7d1b",
					Name:        "Jane Smith",
					Email:       "jane.smith@example.com",
					Description: "A brief description about Jane.",
					CreatedAt:   "2024-07-08T05:50:00.000Z",
					ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
					IsMentor:    true,
				},
			},
			ImageUrl:    "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
			IsMentor:    false,
			Name:        "John Doe",
			Tags:        []openapiGeneral.SchemasUserTagResponse{},
			Uuid:        "7cdb041b-4574-4f7b-a500-c53e74c72e94",
			WayRequests: []openapiGeneral.SchemasWayPlainResponse{},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData, allUsersResponse)
		assert.Equal(t, expectedData, allUsersResponse)
	})
}

func TestUpdateUser(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	userID := "7cdb041b-4574-4f7b-a500-c53e74c72e94"

	t.Run("should successfully update user and return the correct updated user information", func(t *testing.T) {
		token, err := auth.GenerateJWT(userID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		newDescription := "new description"
		newImageUrl := "new imageUrl"
		newName := "new name"
		newIsMentor := false

		request := openapiGeneral.SchemasUpdateUserPayload{
			Description: &newDescription,
			ImageUrl:    &newImageUrl,
			Name:        &newName,
			IsMentor:    &newIsMentor,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		updatedUser, response, err := generalApi.UserAPI.UpdateUser(ctx, userID).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to update User: %v", err)
		}

		expectedData := &openapiGeneral.SchemasUserPlainResponse{
			CreatedAt:   "2024-07-08T10:00:00.000Z",
			Description: newDescription,
			Email:       "john.doe@example.com",
			ImageUrl:    newImageUrl,
			IsMentor:    newIsMentor,
			Name:        newName,
			Uuid:        "7cdb041b-4574-4f7b-a500-c53e74c72e94",
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData, updatedUser)
	})
}

func TestGetUsersByIDs(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	generalApi := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	userID := "7cdb041b-4574-4f7b-a500-c53e74c72e94"

	t.Run("should return the correct user details when valid user IDs are provided", func(t *testing.T) {
		token, err := auth.GenerateJWT(userID, newConfig.SecretSessionKey)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		user1ID := "7cdb041b-4574-4f7b-a500-c53e74c72e94"
		user2ID := "8e77b89d-57c4-4b7f-8cd4-8dfc6bcb7d1b"
		user3ID := "3d922e8a-5d58-4b82-9a3d-83e2e73b3f91"

		request := []string{user1ID, user2ID, user3ID}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		usersResponse, response, err := generalApi.UserAPI.GetUsersByIds(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to get users by ids: %v", err)
		}

		expectedData := []openapiGeneral.SchemasGetUsersByIDsResponse{
			{
				ImageUrl: "https://www.google.com/url?sa=i&url=https%3A%2F%2Fyandex.com%2Fimages%2F%3Flr%3D87%26redircnt%3D1694438178.1&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAE",
				Name:     "John Doe",
				UserId:   user1ID,
			},
			{
				ImageUrl: "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
				Name:     "Jane Smith",
				UserId:   user2ID,
			},
			{
				ImageUrl: "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAT",
				Name:     "Alice Johnson",
				UserId:   user3ID,
			},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.ElementsMatch(t, expectedData, usersResponse)
	})
}
