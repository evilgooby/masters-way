/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SchemasLabelInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasLabelInfo{}

// SchemasLabelInfo struct for SchemasLabelInfo
type SchemasLabelInfo struct {
	JobsAmount           int32        `json:"jobsAmount"`
	JobsAmountPercentage int32        `json:"jobsAmountPercentage"`
	Label                SchemasLabel `json:"label"`
	Time                 int32        `json:"time"`
	TimePercentage       int32        `json:"timePercentage"`
}

type _SchemasLabelInfo SchemasLabelInfo

// NewSchemasLabelInfo instantiates a new SchemasLabelInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasLabelInfo(jobsAmount int32, jobsAmountPercentage int32, label SchemasLabel, time int32, timePercentage int32) *SchemasLabelInfo {
	this := SchemasLabelInfo{}
	this.JobsAmount = jobsAmount
	this.JobsAmountPercentage = jobsAmountPercentage
	this.Label = label
	this.Time = time
	this.TimePercentage = timePercentage
	return &this
}

// NewSchemasLabelInfoWithDefaults instantiates a new SchemasLabelInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasLabelInfoWithDefaults() *SchemasLabelInfo {
	this := SchemasLabelInfo{}
	return &this
}

// GetJobsAmount returns the JobsAmount field value
func (o *SchemasLabelInfo) GetJobsAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.JobsAmount
}

// GetJobsAmountOk returns a tuple with the JobsAmount field value
// and a boolean to check if the value has been set.
func (o *SchemasLabelInfo) GetJobsAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobsAmount, true
}

// SetJobsAmount sets field value
func (o *SchemasLabelInfo) SetJobsAmount(v int32) {
	o.JobsAmount = v
}

// GetJobsAmountPercentage returns the JobsAmountPercentage field value
func (o *SchemasLabelInfo) GetJobsAmountPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.JobsAmountPercentage
}

// GetJobsAmountPercentageOk returns a tuple with the JobsAmountPercentage field value
// and a boolean to check if the value has been set.
func (o *SchemasLabelInfo) GetJobsAmountPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobsAmountPercentage, true
}

// SetJobsAmountPercentage sets field value
func (o *SchemasLabelInfo) SetJobsAmountPercentage(v int32) {
	o.JobsAmountPercentage = v
}

// GetLabel returns the Label field value
func (o *SchemasLabelInfo) GetLabel() SchemasLabel {
	if o == nil {
		var ret SchemasLabel
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SchemasLabelInfo) GetLabelOk() (*SchemasLabel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SchemasLabelInfo) SetLabel(v SchemasLabel) {
	o.Label = v
}

// GetTime returns the Time field value
func (o *SchemasLabelInfo) GetTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *SchemasLabelInfo) GetTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *SchemasLabelInfo) SetTime(v int32) {
	o.Time = v
}

// GetTimePercentage returns the TimePercentage field value
func (o *SchemasLabelInfo) GetTimePercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimePercentage
}

// GetTimePercentageOk returns a tuple with the TimePercentage field value
// and a boolean to check if the value has been set.
func (o *SchemasLabelInfo) GetTimePercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimePercentage, true
}

// SetTimePercentage sets field value
func (o *SchemasLabelInfo) SetTimePercentage(v int32) {
	o.TimePercentage = v
}

func (o SchemasLabelInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasLabelInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobsAmount"] = o.JobsAmount
	toSerialize["jobsAmountPercentage"] = o.JobsAmountPercentage
	toSerialize["label"] = o.Label
	toSerialize["time"] = o.Time
	toSerialize["timePercentage"] = o.TimePercentage
	return toSerialize, nil
}

func (o *SchemasLabelInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobsAmount",
		"jobsAmountPercentage",
		"label",
		"time",
		"timePercentage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasLabelInfo := _SchemasLabelInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasLabelInfo)

	if err != nil {
		return err
	}

	*o = SchemasLabelInfo(varSchemasLabelInfo)

	return err
}

type NullableSchemasLabelInfo struct {
	value *SchemasLabelInfo
	isSet bool
}

func (v NullableSchemasLabelInfo) Get() *SchemasLabelInfo {
	return v.value
}

func (v *NullableSchemasLabelInfo) Set(val *SchemasLabelInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasLabelInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasLabelInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasLabelInfo(val *SchemasLabelInfo) *NullableSchemasLabelInfo {
	return &NullableSchemasLabelInfo{value: val, isSet: true}
}

func (v NullableSchemasLabelInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasLabelInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
