/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SchemasWayCollectionWayResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasWayCollectionWayResponse{}

// SchemasWayCollectionWayResponse struct for SchemasWayCollectionWayResponse
type SchemasWayCollectionWayResponse struct {
	WayCollectionId string `json:"wayCollectionId"`
	WayId           string `json:"wayId"`
}

type _SchemasWayCollectionWayResponse SchemasWayCollectionWayResponse

// NewSchemasWayCollectionWayResponse instantiates a new SchemasWayCollectionWayResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasWayCollectionWayResponse(wayCollectionId string, wayId string) *SchemasWayCollectionWayResponse {
	this := SchemasWayCollectionWayResponse{}
	this.WayCollectionId = wayCollectionId
	this.WayId = wayId
	return &this
}

// NewSchemasWayCollectionWayResponseWithDefaults instantiates a new SchemasWayCollectionWayResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasWayCollectionWayResponseWithDefaults() *SchemasWayCollectionWayResponse {
	this := SchemasWayCollectionWayResponse{}
	return &this
}

// GetWayCollectionId returns the WayCollectionId field value
func (o *SchemasWayCollectionWayResponse) GetWayCollectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WayCollectionId
}

// GetWayCollectionIdOk returns a tuple with the WayCollectionId field value
// and a boolean to check if the value has been set.
func (o *SchemasWayCollectionWayResponse) GetWayCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WayCollectionId, true
}

// SetWayCollectionId sets field value
func (o *SchemasWayCollectionWayResponse) SetWayCollectionId(v string) {
	o.WayCollectionId = v
}

// GetWayId returns the WayId field value
func (o *SchemasWayCollectionWayResponse) GetWayId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WayId
}

// GetWayIdOk returns a tuple with the WayId field value
// and a boolean to check if the value has been set.
func (o *SchemasWayCollectionWayResponse) GetWayIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WayId, true
}

// SetWayId sets field value
func (o *SchemasWayCollectionWayResponse) SetWayId(v string) {
	o.WayId = v
}

func (o SchemasWayCollectionWayResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasWayCollectionWayResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wayCollectionId"] = o.WayCollectionId
	toSerialize["wayId"] = o.WayId
	return toSerialize, nil
}

func (o *SchemasWayCollectionWayResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wayCollectionId",
		"wayId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasWayCollectionWayResponse := _SchemasWayCollectionWayResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasWayCollectionWayResponse)

	if err != nil {
		return err
	}

	*o = SchemasWayCollectionWayResponse(varSchemasWayCollectionWayResponse)

	return err
}

type NullableSchemasWayCollectionWayResponse struct {
	value *SchemasWayCollectionWayResponse
	isSet bool
}

func (v NullableSchemasWayCollectionWayResponse) Get() *SchemasWayCollectionWayResponse {
	return v.value
}

func (v *NullableSchemasWayCollectionWayResponse) Set(val *SchemasWayCollectionWayResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasWayCollectionWayResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasWayCollectionWayResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasWayCollectionWayResponse(val *SchemasWayCollectionWayResponse) *NullableSchemasWayCollectionWayResponse {
	return &NullableSchemasWayCollectionWayResponse{value: val, isSet: true}
}

func (v NullableSchemasWayCollectionWayResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasWayCollectionWayResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
